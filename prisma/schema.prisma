// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Especie {
  id      Int      @id @default(autoincrement())
  nome    String   @db.VarChar(60)
  animais Animal[]

  @@map("especies")
}

model Animal {
  id        Int          @id @default(autoincrement())
  nome      String // Nome do animal, até 60 caracteres
  idade     Int? // Idade do animal
  sexo      Sexos // Sexo do animal
  castrado  Boolean      @default(false)
  destaque  Boolean      @default(true) // Se é destaque ou não
  foto      String       @db.Text // URL ou referência da foto principal
  descricao String? // Descrição opcional do animal
  createdAt DateTime     @default(now()) // Data de criação
  updatedAt DateTime     @updatedAt // Data de última atualização
  porte     Porte        @default(P) // Porte do animal
  especie   Especie      @relation(fields: [especieId], references: [id])
  especieId Int
  status    Status       @default(Disponivel)
  fotos     FotoAnimal[]
  pedidos   Pedido[]

  @@map("animais")
}

model Pedido {
  id         Int      @id @default(autoincrement())
  adotanteId String // Referência ao ID do adotante (UUID)
  animal     Animal   @relation(fields: [animalId], references: [id])
  animalId   Int // Referência ao ID do animal
  descricao  String // Descrição do pedido, até 300 caracteres
  resposta   String? // Resposta ao pedido (opcional)
  createdAt  DateTime @default(now()) // Data de criação
  updatedAt  DateTime @updatedAt // Data de última atualização

  @@map("pedidos")
}

enum Sexos {
  Macho
  Femea
}

enum Status {
  Disponivel
  Adotado
}

model FotoAnimal {
  id         Int     @id @default(autoincrement())
  descricao  String  @db.VarChar(30)
  codigoFoto String  @db.Text
  animal     Animal? @relation(fields: [animalId], references: [id])
  animalId   Int

  @@map("fotoanimais")
}

model FotoFuncionario {
  id            Int          @id @default(autoincrement())
  descricao     String       @db.VarChar(30)
  codigoFoto    String       @db.Text
  funcionario   Funcionario? @relation(fields: [funcionarioId], references: [id])
  funcionarioId String       @db.VarChar(60)

  @@map("fotouncionarios")
}

model Funcionario {
  id             String            @id @default(uuid()) @db.VarChar(36)
  nome           String            @db.VarChar(60)
  cpf            String?           @unique @db.VarChar(11)
  telefone       String            @default("99999999999") @db.VarChar(11)
  estadoCivil    EstadoCivil       @default(Nao_Informado)
  dataNascimento DateTime?
  email          String?           @db.VarChar(60)
  acessaSistema  Boolean           @default(false)
  foto           FotoFuncionario[]
  endereco       Endereco[]
  observacoes    String?           @db.VarChar(400)

  senha String? @db.VarChar(60) // senha deve ser varchar(60)
}

model FotoInteressado {
  id            Int         @id @default(autoincrement())
  descricao     String      @db.VarChar(30)
  codigoFoto    String      @db.Text
  Interessado   Interessado @relation(fields: [interessadoId], references: [id])
  interessadoId Int

  @@map("fotointeressados")
}

//Token usado no id para manter logado nas requisicoes, garante mais seguranca quando for armazenado
//no local storage, pode ser usado fora do id, geralmente é e pode mudar ou experar no tempo estipulado
//podendo assim ter um campo id sequencial e usando o token em outro item abaixo.
model Interessado {
  id              Int               @id @default(autoincrement())
  nome            String            @db.VarChar(60)
  cpf             String?           @unique @db.VarChar(11)
  telefone        String            @default("99999999999") @db.VarChar(11)
  isAtivo         Boolean           @default(true)
  estadoCivil     EstadoCivil       @default(Nao_Informado)
  dataNascimento  DateTime?
  // senha          String            @db.VarChar(60) // senha deve ser varchar(60)
  // recoveryCode   String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  fotos           FotoInteressado[]
  endereco        Endereco[]
  jaAdotouConosco Boolean           @default(false)
  observacoes     String?           @db.VarChar(400)

  @@map("interessados")
}

enum EstadoCivil {
  Nao_Informado
  Casado
  Solteiro
  Divorciado
  Viuvo
}

model Endereco {
  id            Int          @id @default(autoincrement())
  cep           String?      @db.VarChar(60)
  cidade        String       @db.VarChar(60)
  bairro        String?      @db.VarChar(60)
  estado        String       @db.VarChar(60)
  logradouro    String       @db.VarChar(60)
  numero        String       @db.VarChar(60)
  complemento   String?      @db.VarChar(60)
  referencia    String?      @db.VarChar(60)
  Interessado   Interessado? @relation(fields: [interessadoId], references: [id])
  interessadoId Int?
  tipoPessoa    TipoPessoa
  Funcionario   Funcionario? @relation(fields: [funcionarioId], references: [id])
  funcionarioId String?      @db.VarChar(36)
}

enum TipoPessoa {
  Interessado
  Funcionario
}

// model Pedido {
//   id         Int         @id @default(autoincrement())
//   adotante   Interessado @relation(fields: [adotanteId], references: [id])
//   adotanteId String      @db.VarChar(36)
//   animal     Animal      @relation(fields: [animalId], references: [id])
//   animalId   Int
//   descricao  String      @db.VarChar(300)
//   resposta   String?     @db.VarChar(300)
//   createdAt  DateTime    @default(now())
//   updatedAt  DateTime    @updatedAt

//   @@map("pedidos")
// }

// model Admin {
//   id        Int      @id @default(autoincrement())
//   nome      String   @db.VarChar(60)
//   email     String   @unique @db.VarChar(60)
//   senha     String   @db.VarChar(60) // senha deve ser varchar(60)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   animais   Animal[]

//   @@map("admins")
// }

enum Porte {
  PP
  P
  M
  G
  GG
}

model Caixa {
  id        Int              @id @default(autoincrement())
  dia       Int
  mes       Mes
  ano       Int
  tipo      TipoMovimentacao
  valor     Decimal          @db.Decimal(10, 2)
  origem    String           @db.VarChar(35)
  descricao String           @db.VarChar(35)
}

enum TipoMovimentacao {
  Entrada
  Saida
}

enum Mes {
  Janeiro
  Fevereiro
  Marco
  Abril
  Junho
  Julho
  Agosto
  Setembro
  Outubro
  Novembro
  Dezembro
}

// ---------------------------------------
// SUPRIMENTO
model Suprimento {
  id        Int      @id @default(autoincrement())
  codigo    Int
  nome      String   @db.VarChar(50)
  estoque   Int
  marca     String?  @db.VarChar(15)
  estq_min  Float
  descricao String?  @db.Text
  unidade   Unidades @default(Un)

  categoria   Categoria @relation(fields: [categoriaId], references: [id])
  categoriaId Int

  @@map("suprimentos")
}

model Categoria {
  id         Int          @id @default(autoincrement())
  nome       String       @db.VarChar(15)
  descricao  String       @db.VarChar(50)
  Suprimento Suprimento[]
}

enum Unidades {
  Un
  Kg
  g
  Pc
}
